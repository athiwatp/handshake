package main

import (
	"encoding/base64"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"

	blocks "github.com/ipfs/go-block-format"
	cid "github.com/ipfs/go-cid"
	u "github.com/ipfs/go-ipfs-util"
	format "github.com/ipfs/go-ipld-format"
	multihash "github.com/multiformats/go-multihash"
)

func main() {
	helloHash := "QmZULkCELmmk5XNfCgTnCyFgAVxBRBXyDHGGMVoLFLiXEN"
	helloMH, _ := multihash.FromB58String(helloHash)
	helloSUM := u.Hash([]byte("hello"))
	helloSUM2 := u.Hash([]byte{10, 12, 8, 2, 18, 6, 104, 101, 108, 108, 111, 10, 24, 6})
	fmt.Println(helloSUM2.B58String())

	fmt.Println([]byte{10, 12, 8, 2, 18, 6, 104, 101, 108, 108, 111, 10, 24, 6})
	blockH := blocks.NewBlock([]byte{10, 12, 8, 2, 18, 6, 104, 101, 108, 108, 111, 10, 24, 6})
	fmt.Println(blockH)
	fmt.Println(blockH.Multihash())
	fmt.Println([]byte("hello"))

	bbb := blocks.NewBlock([]byte("hello"))
	fmt.Println(bbb.RawData())

	// 10 12 8 2 18 6         // 10 24 6

	fmt.Println("---------")
	fmt.Println("---------")
	fmt.Println("---------")
	fmt.Println("---------")
	fmt.Println("---------")
	fmt.Println("---------")
	fmt.Println(helloMH)
	helloC := cid.NewCidV0(helloMH)
	fmt.Println(helloC.Hash())
	fmt.Println("---------")
	fmt.Println(helloSUM)

	fmt.Println("--------------------------")
	helloS := cid.NewCidV0(helloSUM)
	fmt.Println(helloS.Hash())
	fmt.Println("----")

	bb := blocks.NewBlock([]byte("hello"))
	fmt.Println("block EXP")
	fmt.Println(bb.Multihash())
	fmt.Println(bb.Cid())
	fmt.Println(bb.RawData())
	fmt.Println(bb.Loggable())

	rawHash := "QmevaAiHWVwEqwm3wqQyhqVbwJQ5QT1q47su9xKTgVMrtF"
	mh, err := multihash.FromB58String(rawHash)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println("mh")
	fmt.Println(mh)
	decoded, err := multihash.Decode(mh)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(decoded)

	resp, err := http.Get("https://ipfs.infura.io/ipfs/QmevaAiHWVwEqwm3wqQyhqVbwJQ5QT1q47su9xKTgVMrtF")
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Fatal(err)
	}

	resp2, err := http.Get("http://localhost:5001/api/v0/dag/get?arg=QmevaAiHWVwEqwm3wqQyhqVbwJQ5QT1q47su9xKTgVMrtF")
	if err != nil {
		log.Fatal(err)
	}
	defer resp2.Body.Close()
	body2, err := ioutil.ReadAll(resp2.Body)
	if err != nil {
		log.Fatal(err)
	}

	newHash := base58Sha2256Multihash(body)

	data, _ := base64.StdEncoding.DecodeString(payload)
	hash2 := base58Sha2256Multihash(data[5 : len(data)-3])
	fmt.Println(len(body))
	fmt.Println(len(data[5:]))
	fmt.Printf("source hash: %v\n", rawHash)
	fmt.Printf("new hash   : %v\n", newHash)
	fmt.Printf("new hash2  : %v\n", hash2)

	basicBlock := blocks.NewBlock(body)
	mh2 := basicBlock.Multihash()
	fmt.Println(mh2.B58String())
	basicBlock2 := blocks.NewBlock(body2)
	mh3 := basicBlock2.Multihash()
	fmt.Println(mh2)
	fmt.Println(mh2.B58String())
	fmt.Println(mh3)
	fmt.Println(mh3.B58String())

	data6 := body
	hash6, err := multihash.Sum(data6, multihash.SHA2_256, -1)
	if err != nil {
		log.Fatal(err)
	}

	c1 := cid.NewCidV0(hash6)
	fmt.Println("c1")
	fmt.Println(c1.Hash())

	fmt.Println("basic block")
	fmt.Println(basicBlock)

	node, err := format.Decode(basicBlock2)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println(node)

	// Create a cid manually by specifying the 'prefix' parameters
	pref := cid.Prefix{
		Version:  0,
		Codec:    cid.Raw,
		MhType:   uint64(18),
		MhLength: -1, // default length
	}

	// And then feed it some data
	c, err := pref.Sum(body)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println("Created CID: ", c)

}

func base58Sha2256Multihash(b []byte) string {
	code := uint64(18)
	length := -1
	mh, _ := multihash.Sum(b, code, length)
	return mh.B58String()
}

var payload = ""
